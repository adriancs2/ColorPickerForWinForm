<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>